name: Integration Tests

on: [push, pull_request]

env:
  TEST_BROWSER_HEADLESS: 1
  CI: 1
  OPENSEARCH_VERSION: 3.0.0
  PLUGIN_NAME: opensearch-security
  PLUGIN_VERSION: 3.0.0.0

jobs:
  tests:
    name: Run integration tests
    strategy:
      fauk-fast: false
      matrix:
        os: [windows-latest] #ubuntu-latest
    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout Branch
        uses: actions/checkout@v2

      - uses: browser-actions/setup-geckodriver@latest
      - run: geckodriver --version

      - uses: browser-actions/setup-firefox@latest
      - run: firefox --version

      # Download OpenSearch Security Plugin
      - name: Download OpenSearch Security for Windows
        uses: peternied/download-file@v2
        if: ${{ runner.os == 'Windows' }}
        with:
          url: https://ci.opensearch.org/ci/dbc/distribution-build-opensearch/${{ env.OPENSEARCH_VERSION }}/latest/windows/x64/tar/builds/opensearch/plugins/${{ env.PLUGIN_NAME }}-${{ env.PLUGIN_VERSION }}.zip

      - name: Download OpenSearch Security for Linux
        uses: peternied/download-file@v2
        if: ${{ runner.os == 'Linux' }}
        with:
          url: https://ci.opensearch.org/ci/dbc/distribution-build-opensearch/${{ env.OPENSEARCH_VERSION }}/latest/linux/x64/tar/builds/opensearch/plugins/${{ env.PLUGIN_NAME }}-${{ env.PLUGIN_VERSION }}.zip

      - name: Rename OpenSearch Security Plugin
        run: mv {{ env.PLUGIN_NAME }}-${{ env.PLUGIN_VERSION }}.zip opensearch-security.zip

      - name: Create Setup Script
        if: ${{ runner.os == 'Linux' }}
        run: |
          cat > setup.sh <<'EOF'
          chmod +x  ./opensearch-${{ env.OPENSEARCH_VERSION }}-SNAPSHOT/plugins/${{ env.PLUGIN_NAME }}/tools/install_demo_configuration.sh 
          /bin/bash -c "./opensearch-${{ env.OPENSEARCH_VERSION }}-SNAPSHOT/plugins/${{ env.PLUGIN_NAME }}/tools/install_demo_configuration.sh -y"
          EOF

      - name: Create Setup Script
        if: ${{ runner.os == 'Windows' }}
        run: |
          New-Item .\setup.bat -type file
          Set-Content .\setup.bat -Value "powershell.exe .\opensearch-${{ env.OPENSEARCH_VERSION }}-SNAPSHOT\plugins\${{ env.PLUGIN_NAME }}\tools\install_demo_configuration.bat -y"
          Get-Content .\setup.bat

      - name: Run Opensearch with A Single Plugin
        uses: opensearch-project/security/.github/actions/start-opensearch-with-one-plugin@main
        with:
          opensearch-version: ${{ env.OPENSEARCH_VERSION }}
          plugin-name: ${{ env.PLUGIN_NAME }}
          setup-script-name: setup

      - name: Run Dashboard with Security Dashboards Plugin
        uses: ./.github/actions/install-dashboards
        with:
          plugin_name: security-dashboards-plugin

      - name: Start Dashboards in background
        run: node scripts/build_opensearch_dashboards_platform_plugins.js
        working-directory: ${{ steps.install-dashboards.outputs.dashboards-directory }}

      - name: Run integration tests
        if: ${{ runner.os == 'Linux' }}
        run: |
          echo "check if OpenSearch is running"
          curl -XGET https://localhost:9200 -u 'admin:admin' -k
          yarn test:jest_server --coverage
        working-directory: ${{ steps.install-dashboards.outputs.plugin-directory }}

      - name: Run integration tests
        if: ${{ runner.os == 'Windows' }}
        run: |
          $credentialBytes = [Text.Encoding]::ASCII.GetBytes("admin:admin")
          $encodedCredentials = [Convert]::ToBase64String($credentialBytes)
          $baseCredentials = "Basic $encodedCredentials"
          $Headers = @{ Authorization = $baseCredentials }
          Invoke-WebRequest -SkipCertificateCheck -Uri 'https://localhost:9200/_cat/plugins' -Headers $Headers
          yarn test:jest_server --coverage
          working-directory: ${{ steps.install-dashboards.outputs.plugin-directory }}
        
